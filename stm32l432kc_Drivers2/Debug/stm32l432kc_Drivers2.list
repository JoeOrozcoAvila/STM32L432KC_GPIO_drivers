
stm32l432kc_Drivers2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000428  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005bc  080005c4  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005bc  080005bc  000105c4  2**0
                  CONTENTS
  4 .ARM          00000000  080005bc  080005bc  000105c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005bc  080005c4  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005bc  080005bc  000105bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005c0  080005c0  000105c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  000105c4  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000105c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009f7  00000000  00000000  000105f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001e5  00000000  00000000  00010feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  000111d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00011288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001505  00000000  00000000  00011318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b99  00000000  00000000  0001281d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00004e13  00000000  00000000  000133b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  000181c9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  0001821c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080005a4 	.word	0x080005a4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080005a4 	.word	0x080005a4

080001d4 <delay>:
#include <stdint.h>
#include "stm32l432kc.h"


void delay(void)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e002      	b.n	80001e6 <delay+0x12>
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	3301      	adds	r3, #1
 80001e4:	607b      	str	r3, [r7, #4]
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	4a04      	ldr	r2, [pc, #16]	; (80001fc <delay+0x28>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d9f8      	bls.n	80001e0 <delay+0xc>



}
 80001ee:	bf00      	nop
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fa:	4770      	bx	lr
 80001fc:	0007a11f 	.word	0x0007a11f

08000200 <main>:

int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = GPIOB;		//select the port
 8000206:	4b0d      	ldr	r3, [pc, #52]	; (800023c <main+0x3c>)
 8000208:	603b      	str	r3, [r7, #0]

	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3; //select the pin number
 800020a:	2303      	movs	r3, #3
 800020c:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800020e:	2301      	movs	r3, #1
 8000210:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000212:	2302      	movs	r3, #2
 8000214:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOpType = GPIO_OP_TYPE_PP;
 8000216:	2300      	movs	r3, #0
 8000218:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PuPdControl = GPIO_NO_PUPD;
 800021a:	2300      	movs	r3, #0
 800021c:	72fb      	strb	r3, [r7, #11]

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800021e:	2101      	movs	r1, #1
 8000220:	4806      	ldr	r0, [pc, #24]	; (800023c <main+0x3c>)
 8000222:	f000 f837 	bl	8000294 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000226:	463b      	mov	r3, r7
 8000228:	4618      	mov	r0, r3
 800022a:	f000 f8a1 	bl	8000370 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_3);
 800022e:	2103      	movs	r1, #3
 8000230:	4802      	ldr	r0, [pc, #8]	; (800023c <main+0x3c>)
 8000232:	f000 f97d 	bl	8000530 <GPIO_ToggleOutputPin>
		delay();
 8000236:	f7ff ffcd 	bl	80001d4 <delay>
		GPIO_ToggleOutputPin(GPIOB, GPIO_PIN_NO_3);
 800023a:	e7f8      	b.n	800022e <main+0x2e>
 800023c:	48000400 	.word	0x48000400

08000240 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000240:	480d      	ldr	r0, [pc, #52]	; (8000278 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000242:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000244:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000248:	480c      	ldr	r0, [pc, #48]	; (800027c <LoopForever+0x6>)
  ldr r1, =_edata
 800024a:	490d      	ldr	r1, [pc, #52]	; (8000280 <LoopForever+0xa>)
  ldr r2, =_sidata
 800024c:	4a0d      	ldr	r2, [pc, #52]	; (8000284 <LoopForever+0xe>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000250:	e002      	b.n	8000258 <LoopCopyDataInit>

08000252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000256:	3304      	adds	r3, #4

08000258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800025a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800025c:	d3f9      	bcc.n	8000252 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800025e:	4a0a      	ldr	r2, [pc, #40]	; (8000288 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000260:	4c0a      	ldr	r4, [pc, #40]	; (800028c <LoopForever+0x16>)
  movs r3, #0
 8000262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000264:	e001      	b.n	800026a <LoopFillZerobss>

08000266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000268:	3204      	adds	r2, #4

0800026a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800026a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800026c:	d3fb      	bcc.n	8000266 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800026e:	f000 f975 	bl	800055c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000272:	f7ff ffc5 	bl	8000200 <main>

08000276 <LoopForever>:

LoopForever:
    b LoopForever
 8000276:	e7fe      	b.n	8000276 <LoopForever>
  ldr   r0, =_estack
 8000278:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800027c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000280:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000284:	080005c4 	.word	0x080005c4
  ldr r2, =_sbss
 8000288:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800028c:	2000001c 	.word	0x2000001c

08000290 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000290:	e7fe      	b.n	8000290 <ADC1_IRQHandler>
	...

08000294 <GPIO_PeriClockControl>:
 * Function that enables or disables peripheral clock for the given GPIO port
 * Param1:	base address of the gpio peripheral
 * Param2:  ENABLE or DISABLE macros
 * */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
 800029c:	460b      	mov	r3, r1
 800029e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002a0:	78fb      	ldrb	r3, [r7, #3]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d12b      	bne.n	80002fe <GPIO_PeriClockControl+0x6a>
	{
		if(pGPIOx == GPIOA)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80002ac:	d106      	bne.n	80002bc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002ae:	4b2c      	ldr	r3, [pc, #176]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002b2:	4a2b      	ldr	r2, [pc, #172]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	63d3      	str	r3, [r2, #60]	; 0x3c
		else if(pGPIOx == GPIOH)
			{
				GPIOH_PCLK_DIS();
			}
	}
}
 80002ba:	e04b      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOB)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a29      	ldr	r2, [pc, #164]	; (8000364 <GPIO_PeriClockControl+0xd0>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d106      	bne.n	80002d2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002c4:	4b26      	ldr	r3, [pc, #152]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002c8:	4a25      	ldr	r2, [pc, #148]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002ca:	f043 0308 	orr.w	r3, r3, #8
 80002ce:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80002d0:	e040      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOC)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a24      	ldr	r2, [pc, #144]	; (8000368 <GPIO_PeriClockControl+0xd4>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80002da:	4b21      	ldr	r3, [pc, #132]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002de:	4a20      	ldr	r2, [pc, #128]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002e0:	f043 0304 	orr.w	r3, r3, #4
 80002e4:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80002e6:	e035      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOH)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a20      	ldr	r2, [pc, #128]	; (800036c <GPIO_PeriClockControl+0xd8>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d131      	bne.n	8000354 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 80002f0:	4b1b      	ldr	r3, [pc, #108]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80002f4:	4a1a      	ldr	r2, [pc, #104]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 80002f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fa:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80002fc:	e02a      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		if(pGPIOx == GPIOA)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClockControl+0x80>
				GPIOA_PCLK_DIS();
 8000306:	4b16      	ldr	r3, [pc, #88]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 8000308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800030a:	4a15      	ldr	r2, [pc, #84]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 800030c:	f023 0301 	bic.w	r3, r3, #1
 8000310:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000312:	e01f      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOB)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a13      	ldr	r2, [pc, #76]	; (8000364 <GPIO_PeriClockControl+0xd0>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClockControl+0x96>
				GPIOB_PCLK_DIS();
 800031c:	4b10      	ldr	r3, [pc, #64]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 800031e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000320:	4a0f      	ldr	r2, [pc, #60]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 8000322:	f023 0302 	bic.w	r3, r3, #2
 8000326:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000328:	e014      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOC)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a0e      	ldr	r2, [pc, #56]	; (8000368 <GPIO_PeriClockControl+0xd4>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClockControl+0xac>
				GPIOC_PCLK_DIS();
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 8000334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000336:	4a0a      	ldr	r2, [pc, #40]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 8000338:	f023 0304 	bic.w	r3, r3, #4
 800033c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800033e:	e009      	b.n	8000354 <GPIO_PeriClockControl+0xc0>
		else if(pGPIOx == GPIOH)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a0a      	ldr	r2, [pc, #40]	; (800036c <GPIO_PeriClockControl+0xd8>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d105      	bne.n	8000354 <GPIO_PeriClockControl+0xc0>
				GPIOH_PCLK_DIS();
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 800034a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800034c:	4a04      	ldr	r2, [pc, #16]	; (8000360 <GPIO_PeriClockControl+0xcc>)
 800034e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000352:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000354:	bf00      	nop
 8000356:	370c      	adds	r7, #12
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40021000 	.word	0x40021000
 8000364:	48000400 	.word	0x48000400
 8000368:	48000800 	.word	0x48000800
 800036c:	48001c00 	.word	0x48001c00

08000370 <GPIO_Init>:
/*Function that initialize given GPIO port and GPIO pin
 * Param1:	base address of the gpio peripheral
 * Param2:  ENABLE or DISABLE macros*/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000378:	2300      	movs	r3, #0
 800037a:	60fb      	str	r3, [r7, #12]
	//configure the mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800037c:	687b      	ldr	r3, [r7, #4]
 800037e:	7a5b      	ldrb	r3, [r3, #9]
 8000380:	2b03      	cmp	r3, #3
 8000382:	d820      	bhi.n	80003c6 <GPIO_Init+0x56>
	{
		//non interrupt mode
		//                 pin mode: 1                  <<  2 *  (pin#4) to set pin 4 as output
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	7a5b      	ldrb	r3, [r3, #9]
 8000388:	461a      	mov	r2, r3
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	7a1b      	ldrb	r3, [r3, #8]
 800038e:	005b      	lsls	r3, r3, #1
 8000390:	fa02 f303 	lsl.w	r3, r2, r3
 8000394:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	7a1b      	ldrb	r3, [r3, #8]
 80003a0:	4619      	mov	r1, r3
 80003a2:	2303      	movs	r3, #3
 80003a4:	408b      	lsls	r3, r1
 80003a6:	43db      	mvns	r3, r3
 80003a8:	4619      	mov	r1, r3
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	400a      	ands	r2, r1
 80003b0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //store the value of temp into the actual register that is MODER
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	6819      	ldr	r1, [r3, #0]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	68fa      	ldr	r2, [r7, #12]
 80003be:	430a      	orrs	r2, r1
 80003c0:	601a      	str	r2, [r3, #0]
		temp = 0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	60fb      	str	r3, [r7, #12]
	else
	{
		//interrupt mode
	}
	//configure the speed
	temp = 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	7a9b      	ldrb	r3, [r3, #10]
 80003ce:	461a      	mov	r2, r3
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	7a1b      	ldrb	r3, [r3, #8]
 80003d4:	005b      	lsls	r3, r3, #1
 80003d6:	fa02 f303 	lsl.w	r3, r2, r3
 80003da:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	689a      	ldr	r2, [r3, #8]
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	7a1b      	ldrb	r3, [r3, #8]
 80003e6:	4619      	mov	r1, r3
 80003e8:	2303      	movs	r3, #3
 80003ea:	408b      	lsls	r3, r1
 80003ec:	43db      	mvns	r3, r3
 80003ee:	4619      	mov	r1, r3
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	400a      	ands	r2, r1
 80003f6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	6899      	ldr	r1, [r3, #8]
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	430a      	orrs	r2, r1
 8000406:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000408:	2300      	movs	r3, #0
 800040a:	60fb      	str	r3, [r7, #12]
	//configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	7adb      	ldrb	r3, [r3, #11]
 8000410:	461a      	mov	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	7a1b      	ldrb	r3, [r3, #8]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	68da      	ldr	r2, [r3, #12]
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	7a1b      	ldrb	r3, [r3, #8]
 8000428:	4619      	mov	r1, r3
 800042a:	2303      	movs	r3, #3
 800042c:	408b      	lsls	r3, r1
 800042e:	43db      	mvns	r3, r3
 8000430:	4619      	mov	r1, r3
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	681b      	ldr	r3, [r3, #0]
 8000436:	400a      	ands	r2, r1
 8000438:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	68d9      	ldr	r1, [r3, #12]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	68fa      	ldr	r2, [r7, #12]
 8000446:	430a      	orrs	r2, r1
 8000448:	60da      	str	r2, [r3, #12]
	temp = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	60fb      	str	r3, [r7, #12]
	//configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOpType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	7b1b      	ldrb	r3, [r3, #12]
 8000452:	461a      	mov	r2, r3
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	7a1b      	ldrb	r3, [r3, #8]
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	685a      	ldr	r2, [r3, #4]
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	7a1b      	ldrb	r3, [r3, #8]
 8000468:	4619      	mov	r1, r3
 800046a:	2301      	movs	r3, #1
 800046c:	408b      	lsls	r3, r1
 800046e:	43db      	mvns	r3, r3
 8000470:	4619      	mov	r1, r3
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	400a      	ands	r2, r1
 8000478:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	6859      	ldr	r1, [r3, #4]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	68fa      	ldr	r2, [r7, #12]
 8000486:	430a      	orrs	r2, r1
 8000488:	605a      	str	r2, [r3, #4]
	temp = 0;
 800048a:	2300      	movs	r3, #0
 800048c:	60fb      	str	r3, [r7, #12]
	//configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	7a5b      	ldrb	r3, [r3, #9]
 8000492:	2b02      	cmp	r3, #2
 8000494:	d146      	bne.n	8000524 <GPIO_Init+0x1b4>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7)
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	7a1b      	ldrb	r3, [r3, #8]
 800049a:	2b07      	cmp	r3, #7
 800049c:	d821      	bhi.n	80004e2 <GPIO_Init+0x172>
		{	//pin 0 to 7 low register
			temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	7a1b      	ldrb	r3, [r3, #8]
 80004a2:	f003 0307 	and.w	r3, r3, #7
 80004a6:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRL &= (0xF << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);//clearing
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	6a1a      	ldr	r2, [r3, #32]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	7a1b      	ldrb	r3, [r3, #8]
 80004b2:	4619      	mov	r1, r3
 80004b4:	230f      	movs	r3, #15
 80004b6:	408b      	lsls	r3, r1
 80004b8:	4619      	mov	r1, r3
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	400a      	ands	r2, r1
 80004c0:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRL |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp));
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	6a1a      	ldr	r2, [r3, #32]
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	7b5b      	ldrb	r3, [r3, #13]
 80004cc:	4619      	mov	r1, r3
 80004ce:	68fb      	ldr	r3, [r7, #12]
 80004d0:	009b      	lsls	r3, r3, #2
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	4619      	mov	r1, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	430a      	orrs	r2, r1
 80004de:	621a      	str	r2, [r3, #32]
			pGPIOHandle->pGPIOx->AFRH &= (0xF << (4 * temp));//clearing
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp));
		}
	}

}
 80004e0:	e020      	b.n	8000524 <GPIO_Init+0x1b4>
			temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	7a1b      	ldrb	r3, [r3, #8]
 80004e6:	f003 0307 	and.w	r3, r3, #7
 80004ea:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFRH &= (0xF << (4 * temp));//clearing
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	009b      	lsls	r3, r3, #2
 80004f6:	210f      	movs	r1, #15
 80004f8:	fa01 f303 	lsl.w	r3, r1, r3
 80004fc:	4619      	mov	r1, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	400a      	ands	r2, r1
 8000504:	625a      	str	r2, [r3, #36]	; 0x24
			pGPIOHandle->pGPIOx->AFRH |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7b5b      	ldrb	r3, [r3, #13]
 8000510:	4619      	mov	r1, r3
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	fa01 f303 	lsl.w	r3, r1, r3
 800051a:	4619      	mov	r1, r3
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	430a      	orrs	r2, r1
 8000522:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000524:	bf00      	nop
 8000526:	3714      	adds	r7, #20
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr

08000530 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = value;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	460b      	mov	r3, r1
 800053a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 1 << PinNumber);
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	695b      	ldr	r3, [r3, #20]
 8000540:	78fa      	ldrb	r2, [r7, #3]
 8000542:	2101      	movs	r1, #1
 8000544:	fa01 f202 	lsl.w	r2, r1, r2
 8000548:	405a      	eors	r2, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	615a      	str	r2, [r3, #20]
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr
	...

0800055c <__libc_init_array>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	4d0d      	ldr	r5, [pc, #52]	; (8000594 <__libc_init_array+0x38>)
 8000560:	4c0d      	ldr	r4, [pc, #52]	; (8000598 <__libc_init_array+0x3c>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	2600      	movs	r6, #0
 8000568:	42a6      	cmp	r6, r4
 800056a:	d109      	bne.n	8000580 <__libc_init_array+0x24>
 800056c:	4d0b      	ldr	r5, [pc, #44]	; (800059c <__libc_init_array+0x40>)
 800056e:	4c0c      	ldr	r4, [pc, #48]	; (80005a0 <__libc_init_array+0x44>)
 8000570:	f000 f818 	bl	80005a4 <_init>
 8000574:	1b64      	subs	r4, r4, r5
 8000576:	10a4      	asrs	r4, r4, #2
 8000578:	2600      	movs	r6, #0
 800057a:	42a6      	cmp	r6, r4
 800057c:	d105      	bne.n	800058a <__libc_init_array+0x2e>
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	f855 3b04 	ldr.w	r3, [r5], #4
 8000584:	4798      	blx	r3
 8000586:	3601      	adds	r6, #1
 8000588:	e7ee      	b.n	8000568 <__libc_init_array+0xc>
 800058a:	f855 3b04 	ldr.w	r3, [r5], #4
 800058e:	4798      	blx	r3
 8000590:	3601      	adds	r6, #1
 8000592:	e7f2      	b.n	800057a <__libc_init_array+0x1e>
 8000594:	080005bc 	.word	0x080005bc
 8000598:	080005bc 	.word	0x080005bc
 800059c:	080005bc 	.word	0x080005bc
 80005a0:	080005c0 	.word	0x080005c0

080005a4 <_init>:
 80005a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005a6:	bf00      	nop
 80005a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005aa:	bc08      	pop	{r3}
 80005ac:	469e      	mov	lr, r3
 80005ae:	4770      	bx	lr

080005b0 <_fini>:
 80005b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005b2:	bf00      	nop
 80005b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005b6:	bc08      	pop	{r3}
 80005b8:	469e      	mov	lr, r3
 80005ba:	4770      	bx	lr
